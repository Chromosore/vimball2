*vimball2.txt*	A rewrite of the vimball extractor for the vim8 era

1. Introduction                               :	|vimball2|
2. Vimball Manual  ...........................:	|vimball2-manual|
   1. Ex API  ................................:	|vimball2-commands|
   2. Functional API  ........................:	|vimball2-functions|
      1. API functions  ......................:	|vimball2-api|
      2. Archiver  ...........................:	|vimball2#archiver|
      3. Extractor  ..........................:	|vimball2#extractor|
      4. Legacy API  .........................:	|vimball2#legacy|
      5. Util functions  .....................:	|vimball2#util|
3. Why? ......................................: |vimball2-why|
4. License ...................................: |vimball2-license|


==============================================================================
1. Introduction					*vimball2*

	vimball2 is a rewrite of the Vimball Extractor by Dr Chip. Check out
	his website at www.drchip.org.

	This plugin features both an archiver and an extractor.

	If you want to build a vimball archive (why would you, though), do >
		:VimballArchive dir archive.vba
<	to package the "dir" directory into the "archive.vba" archive.

	On the other hand, if you want to extract a vimball, do >
		:VimballExtract archive.vba dir
<	to extract archive.vba in dir, or just do >
		:VimballExtract archive.vba
<	to install archive.vba as a vim8 plugin (see |packages|).

	Some of the ex commands are inherited from the original Vimball
	Extractor and were only kept to have a decent compatibility with it.


==============================================================================
2. Vimball Manual				*vimball2-manual*

------------------------------------------------------------------------------
2.1. Ex API					*vimball2-commands*

:VimballArchive[!] {dir} {file}			*:VimballArchive*
		Create a new archive holding the content of {dir} and save it
		to {file}.

		If {file} already exists, an error will be raised.
		If ! was specified though, the file will be overwritten.

:VimballExtract[!] [dir]			*:VimballExtract*
		Extract the archive opened in the current buffer and put it in
		[dir]. If no [dir] was specified, the archive will be
		extracted in a directory suitable for plugins, namely in the
		first directory of the 'runtimepath', under pack/vimball/start.

		If [dir] already exists, an error will be raised, unless ! was
		specified, in which case [dir] will be deleted first.

		This allows to quickly install a vimball as a vim8 plugin that
		will get loaded on startup. See |packages| for more details.

:VimballList					*:VimballList*
		List the content of the archive opened in the current buffer.

:[range]MkVimball[!] {file} [root]		*:MkVimball*
		Create a new archive from the files specified in [range] and
		save it to {file}.
		If [root] is specified, the paths in [range] are treated as
		relative to this directory instead of the current directory.

		[range] defaults to the current line.

		If {file} already exists, an error will be raised.
		If ! was specified though, the file will be overwritten.

		This command is one of the commands inherited from the Vimball
		Extractor. It is particularly useful if you want to create an
		archive from a well known set of files, especially as
		:VimballArchive doesn't provide a way to include or exclude
		files based on patterns.

:UseVimball[!] [dir]				*:UseVimball*
		This command is provided for compatibility with the Vimball
		Extractor and the vimball file format.
		See |:VimballExtract|.

:RmVimball [root]				*:RmVimball*
		Remove a vimball installed by |:VimballExtract|. The archive
		must be opened in the current buffer (or a file with the same
		name) to determine where it was installed.

		If [root] is specified, it will search for the installed
		vimball under this directory.

		Because vimball extract archives in their own directories,
		this command just removes the directory entirely, even
		deleting files that don't belong to the archive.
		This might change in the future, though.

		This command is inherited from the Vimball Extractor, and it
		is mainly here for this reason. However, I find it quite
		useful when I remove a vimball that I've just installed,
		because I don't have to find it manually.

------------------------------------------------------------------------------
2.2.1. API functions				*vimball2-api*

vimball2#archive()				*vimball2#archive()*

vimball2#extract()				*vimball2#extract()*

vimball2#list()					*vimball2#list()*

------------------------------------------------------------------------------
2.2.2. Archiver					*vimball2#archiver*

vimball2#archiver#archive()			*vimball2#archiver#archive()*

vimball2#archiver#archive_file()		*vimball2#archiver#archive_file()*

------------------------------------------------------------------------------
2.2.3. Extractor				*vimball2#extractor*

vimball2#extractor#extract()			*vimball2#extractor#extract()*

vimball2#extractor#iter_archive()		*vimball2#extractor#iter_archive()*

------------------------------------------------------------------------------
2.2.4. Legacy API				*vimball2#legacy*

vimball2#legacy#remove()			*vimball2#legacy#remove()*

vimball2#legacy#mk_vimball()			*vimball2#legacy#mk_vimball()*

------------------------------------------------------------------------------
2.2.5. Util functions				*vimball2#util*

vimball2#util#msg()				*vimball2#util#msg()*

vimball2#util#home()				*vimball2#util#home()*

vimball2#util#prompt_rm()			*vimball2#util#prompt_rm()*


==============================================================================
3. Why?						*vimball2-why*

	When the Vimball Extractor was created, vim8 packages didn't exist
	yet. It purpose was to solve the plugin distribution and management
	issue, by distributing plugins as files -- vimball archives -- and
	having a tool to manage them -- the vimball extractor --, which put
	the plugin's files in subdirectories of ~/.vim and kept track of which
	files belong to which archive.

	Eventually though, other tools like pathogen superseded it, by using a
	directory-based approach, which made plugin way easier to install and
	remove.

	Dr Chip stayed in the vim7 era though, and on his website, all of his
	plugins are distributed as vimball, but I wanted to try them anyway.

	At first, I edited the vimball script, but it was messy and it didn't
	work on neovim.

	So I built a full blown extractor, and a complete archiver.


==============================================================================
4. License					*vimball2-license*


==============================================================================
vim:tw=78:ts=8:ft=help
